# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy Node.js app to Azure Web App - courtbook-rest

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '22.x'

      - name: npm install and build
        working-directory: ./apps/api
        run: |
          npm ci
          npx prisma generate
          npm run build

      # - name: Zip artifact for deployment
      #   run: zip release.zip ./* -r

      - name: Prepare deployment package
        run: |
          mkdir -p deployment_package
          cp -r apps/api/dist deployment_package/
          cp apps/api/package.json deployment_package/
          cp apps/api/package-lock.json deployment_package/
          cp -r apps/api/prisma deployment_package/

          # Copy node_modules with proper permissions
          cp -r apps/api/node_modules deployment_package/
          
          # Fix permissions for Prisma binaries
          chmod -R +x deployment_package/node_modules/.prisma
          chmod -R +x deployment_package/node_modules/@prisma/engines
          
          # Verify Prisma engine exists
          echo "Verifying Prisma engine:"
          ls -la deployment_package/node_modules/.prisma/client
          ls -la deployment_package/node_modules/@prisma/engines

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: deployment_package

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app

      # - name: Unzip artifact for deployment
      #   run: unzip release.zip

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_C1A521D73F8148CC8C8641C34A87365B }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_55A4DB056A744668B483070F53971112 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_98CDEE2F8AA94234B53B1A096CBD5941 }}

      - name: Configure Azure App Settings
        uses: azure/appservice-settings@v2
        with:
          app-name: 'courtbook-rest'
          slot-name: 'Production'
          app-settings-json: |
            [
              {"name": "WEBSITE_RUN_FROM_PACKAGE", "value": "0", "slotSetting": false},
              {"name": "SCM_DO_BUILD_DURING_DEPLOYMENT", "value": "false", "slotSetting": false},
              {"name": "PRISMA_CLIENT_ENGINE_TYPE", "value": "binary", "slotSetting": false},
              {"name": "WEBSITE_NODE_DEFAULT_VERSION", "value": "~22", "slotSetting": false},
              {"name": "LinuxFxVersion", "value": "NODE|22-lts", "slotSetting": false}
            ]

      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'courtbook-rest'
          slot-name: 'Production'
          package: .
          runtime: 'node'
          startup-command: 'node dist/index.js'
      
      - name: Run Prisma migrations
        run: |
          az webapp ssh --resource-group CourtBookApi-Resource --name courtbook-rest \
            --command "cd /home/site/wwwroot && npx prisma migrate deploy"